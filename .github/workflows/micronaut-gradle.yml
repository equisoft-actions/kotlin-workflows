name: Micronaut Gradle

on:
  workflow_call:
    inputs:
      name:
        description: "Application name. Used as base to generate jar name, image name, sdk name, etc..."
        required: true
        type: string
      gradle-subproject:
        description: "Gradle subproject name. ex: bff"
        required: true
        type: string
      checks:
        description: |
          List of enabled check separated by comma.
          default: static_analysis,unit_tests,lint_dockerfiles
          available checks: static_analysis,unit_tests,e2e_tests,lint_dockerfiles
        required: false
        default: "static_analysis,unit_tests,lint_dockerfiles"
        type: string
      docker-context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context.
        required: false
        type: string
        default: ""
      image-name:
        description: "Allow to specify a docker image name. By default the image-name is generated from the name and subproject."
        required: false
        type: string
        default: ""
      native-build:
        description: |
          `true` if this project should produce a native executable through GraalVM. This actions expects the
          Micronaut-Gradle plugin to be configured.
          A reference implementation is available in webapp-boilerplate: https://github.com/kronostechnologies/webapp-boilerplate/blob/master/backend/bff/build.gradle.kts
          Defaults to false.
        required: false
        type: boolean
        default: false
      lambda-build:
        description: |
          `true` if this project should produce a lambda ZIP file.
          Defaults to false.
        required: false
        type: boolean
        default: false
      platforms:
        description: "List of platforms to build"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      publish-image:
        description: |
          Set to `true` to enable Docker image publication. This will typically only be `false` until the ECR repository is created.
          Defaults to true.
        required: false
        default: true
        type: boolean
      enable-openapi:
        description: "Enable generation and upload of an OpenAPI specification. Defaults to `false`."
        required: false
        default: false
        type: boolean
      openapi-file-prefix:
        description: "Prefix for the openapi.yml file. Usually a snake-case of the @OpenAPIDefinition title."
        required: false
        default: ""
        type: string
      enable-openapi-sdk:
        description: "Comma separated list of SDKs to generate. ie: 'php,typescript,micronaut,kotlin'"
        required: false
        default: ""
        type: string
      publish-openapi-sdk:
        description: |
          `true` to publish built SDKs. BFF backends will usually turn this off whilst micro-services will enable publication.

          Defaults to false.
        required: false
        default: false
        type: boolean
      publish-openapi-sdk-for-hotfix:
        description: |
          `true` to publish built SDKs when the deployment is a hotfix. `publish-openapi-sdk` must also be true.

          Defaults to false.
        required: false
        default: false
        type: boolean
      workflow-path:
        description: "Workflow file path allowing changes detection"
        default: ".github/workflows/micronaut-gradle.yml"
        required: false
        type: string
      working-directory:
        description: "Workflow working directory"
        default: '.'
        required: false
        type: string
      enable-test-coverage-comment:
        description: Post coverage results as a comment on the Pull Request. Defaults to `true`.
        required: false
        default: true
        type: boolean
      skip-duplicate-do-not-skip:
        default: '["push", "schedule", "workflow_dispatch"]'
        description: 'A JSON-Array of events that requires all checks to be run'
        required: false
        type: string
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      ECR_REGISTRY:
        description: The AWS ECR registry where the image will be pushed to.
        required: true
      ECR_AWS_ACCESS_KEY_ID:
        description: An AWS access key ID that has write permissions to the registry.
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        description: An AWS secret access key that has write permissions to the registry.
        required: true
      ECR_AWS_REGION:
        description: AWS region for the registry.
        required: true
      SLACK_NOTIFICATION_WEBHOOK_URL:
        description: A Slack webhook where workflow failures will be published to.
        required: true
    outputs:
      image-tag:
        description: Tag of built Docker image (without repository)
        value: ${{ jobs.image.outputs.image-tag }}
      lambda-artifact:
        description: Lambda artifact built by the image job
        value: ${{ jobs.image.outputs.lambda-artifact }}
      version:
        description: The computed version tag generated by this workflow
        value: ${{ jobs.setup.outputs.version }}

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content
          do_not_skip: ${{ inputs.skip-duplicate-do-not-skip }}
          paths: >-
            [
              "${{ inputs.workflow-path }}",
              ".tool-versions",
              "${{ inputs.working-directory }}/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs: [pre_checks]
    if: needs.pre_checks.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      subproject-dir: ${{ steps.build-metadata.outputs.subproject-dir }}
      docker-context: ${{ steps.build-metadata.outputs.docker-context }}
      dockerfile: ${{ steps.build-metadata.outputs.dockerfile }}
      image-name: ${{ steps.build-metadata.outputs.image-name }}
      is-release: ${{ steps.metadata.outputs.is-release }}
      micronaut-gradle-installed: ${{ steps.build-metadata.outputs.micronaut-gradle-installed }}
      openapi-file: ${{ steps.build-metadata.outputs.openapi-file }}
      use-emulation: ${{ steps.build-metadata.outputs.use-emulation }}
      build-image-runner: ${{ steps.build-metadata.outputs.build-image-runner }}
      publishable: ${{ steps.metadata.outputs.publishable }}
      is-hotfix: ${{ steps.metadata.outputs.is-hotfix }}
      sdk-generators-matrix: ${{ steps.build-metadata.outputs.sdk-generators-matrix }}
      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrappers
        uses: gradle/wrapper-validation-action@v1

      - name: Application metadata
        id: metadata
        uses: equisoft-actions/application-metadata@v1
        with:
          hotfix-branch-prefix: release/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Build metadata
        id: build-metadata
        shell: bash
        run: |
          BASE_NAME=${{ inputs.name }}
          FULL_NAME=$BASE_NAME
          GRADLE_SUBPROJECT=${{ inputs.gradle-subproject }}
          SUBPROJECT_DIR=${{ inputs.working-directory }}
          VERSION=${{ steps.metadata.outputs.version }}

          if [[ "$GRADLE_SUBPROJECT" != "" ]]; then
            FULL_NAME="$BASE_NAME-$GRADLE_SUBPROJECT"
            SUBPROJECT_DIR="$SUBPROJECT_DIR/$GRADLE_SUBPROJECT"
          else
            GRADLE_SUBPROJECT="."
          fi

          IMAGE_NAME=${{ inputs.image-name }}
          if [[ "$IMAGE_NAME" == "" ]]; then
            IMAGE_NAME="$FULL_NAME"
          fi

          MICRONAUT_GRADLE_INSTALLED=$(grep -s -q 'id("io.micronaut.application")\|id("com.equisoft.standards.micronaut")\|id = "com.equisoft.standards.micronaut"\|id = "com.equisoft.standards.gradle.micronaut"' "$SUBPROJECT_DIR/build.gradle.kts" "${{ inputs.working-directory }}/gradle/libs.versions.toml" 2>&1; echo $?)
          BUILD_IMAGE_RUNNER="ubuntu-latest"
          USE_EMULATION="true"

          DOCKER_CONTEXT=${{ inputs.docker-context }}
          if [ ${{ inputs.native-build }} = true ]; then
            if [ "$MICRONAUT_GRADLE_INSTALLED" != 0 ]; then
              echo "::error ::A native build expects the Micronaut-Gradle plugin to be configured."
              exit 1
            fi

            BUILD_IMAGE_RUNNER="self-hosted"
            USE_EMULATION="false"

            BUILD_CONTEXT="build/docker/native-main"
            DOCKERFILE="$GRADLE_SUBPROJECT/$BUILD_CONTEXT/DockerfileNative"
            if [[ "$DOCKER_CONTEXT" == "" ]]; then DOCKER_CONTEXT="$SUBPROJECT_DIR/$BUILD_CONTEXT"; fi
          elif [ "$MICRONAUT_GRADLE_INSTALLED" = 0 ]; then
            BUILD_CONTEXT="build/docker/main"
            DOCKERFILE="$GRADLE_SUBPROJECT/$BUILD_CONTEXT/Dockerfile"
            if [[ "$DOCKER_CONTEXT" == "" ]]; then DOCKER_CONTEXT="$SUBPROJECT_DIR/$BUILD_CONTEXT"; fi
          else
            DOCKERFILE="$GRADLE_SUBPROJECT/Dockerfile"
            if [[ "$DOCKER_CONTEXT" == "" ]]; then DOCKER_CONTEXT="${{ inputs.working-directory }}"; fi
          fi

          OPENAPI_FILE_PREFIX=${{ inputs.openapi-file-prefix }}
          if [[ "$OPENAPI_FILE_PREFIX" == "" ]]; then
            OPENAPI_FILE_PREFIX="$FULL_NAME"
          fi
          OPENAPI_FILE="$OPENAPI_FILE_PREFIX-$VERSION.yml"

          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "docker-context=${DOCKER_CONTEXT}" >> $GITHUB_OUTPUT
          echo "dockerfile=${DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "subproject-dir=${SUBPROJECT_DIR}" >> $GITHUB_OUTPUT
          echo "micronaut-gradle-installed=$( [ "$MICRONAUT_GRADLE_INSTALLED" = 0 ] && echo true || echo false )" >> $GITHUB_OUTPUT
          echo "openapi-file=${OPENAPI_FILE}" >> $GITHUB_OUTPUT
          echo "build-image-runner=${BUILD_IMAGE_RUNNER}" >> $GITHUB_OUTPUT
          echo "use-emulation=${USE_EMULATION}" >> $GITHUB_OUTPUT

          sdk_generators_input="${{ inputs.enable-openapi-sdk }}"
          sdk_generators_input="${sdk_generators_input//,/$'\n'}"
          sdk_generators=(${sdk_generators_input//,/ })
          sdk_generators_json=$(jq --compact-output --null-input '$ARGS.positional' --args "${sdk_generators[@]}")
          echo "sdk-generators-matrix=$sdk_generators_json" >> $GITHUB_OUTPUT

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs:
     - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Compile source and test code
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          ./gradlew -p ${{ inputs.gradle-subproject }} ci-classes \
            -Papplication.version=${{ needs.setup.outputs.version }} \
            -Pgpr.user=${{ secrets.GPR_USER }} \
            -Pgpr.key=${{ secrets.GPR_KEY }}

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v4
        if: success() && inputs.enable-openapi
        with:
          name: openapi-${{ needs.setup.outputs.openapi-file }}
          path: |
            ${{ needs.setup.outputs.subproject-dir }}/build/tmp/kapt3/classes/main/META-INF/swagger/${{ needs.setup.outputs.openapi-file }}
            ${{ needs.setup.outputs.subproject-dir }}/build/generated/ksp/main/resources/META-INF/swagger/${{ needs.setup.outputs.openapi-file }}
          retention-days: 5
          if-no-files-found: error

  static_analysis:
    name: Static analysis
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'static_analysis')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name:  Run static check analysis
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          ./gradlew -p ${{ inputs.gradle-subproject }} ci-check \
            -Papplication.version=${{ needs.setup.outputs.version }} \
            -Pgpr.user=${{ secrets.GPR_USER }} \
            -Pgpr.key=${{ secrets.GPR_KEY }}

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: static-check-reports
          path: |
            ${{ needs.setup.outputs.subproject-dir }}/build/reports/detekt
            ${{ needs.setup.outputs.subproject-dir }}/build/reports/ktlint
          retention-days: 5

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'unit_tests')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Run unit tests
        uses: equisoft-actions/gradle-junit@d2b5986f778accad4a2c22834ab71bdaf1cad780
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          task-name: unit-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  e2e_tests:
    name: E2E tests
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'e2e_tests')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Run e2e tests
        uses: equisoft-actions/gradle-junit@d2b5986f778accad4a2c22834ab71bdaf1cad780
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          task-name: e2e-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  test_coverage_verification:
    name: Test coverage verification
    runs-on: ubuntu-latest
    needs: [setup, unit_tests, e2e_tests]
    if: |
      !failure() &&
      !cancelled() &&
      (contains(inputs.checks, 'unit_tests') || contains(inputs.checks, 'e2e_tests')) &&
      (success('unit_tests') || success('e2e_tests'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Validate test coverage
        uses: equisoft-actions/gradle-jacoco-check@9c5d5cf28c732ffe0e7103f4d602e9fbb20fccb7
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
          enable-coverage-comment: ${{ inputs.enable-test-coverage-comment }}

  lint_dockerfiles:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs: [setup]
    if: contains(inputs.checks, 'lint_dockerfiles')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate Dockerfile
        uses: equisoft-actions/hadolint@v1
        with:
          dockerfile: ${{ needs.setup.outputs.dockerfile }}
          working-directory: ${{ inputs.working-directory }}

  image:
    name: Build image
    runs-on: ${{ needs.setup.outputs.build-image-runner }}
    outputs:
      image-tag: ${{ steps.output-pushed-image.outputs.image-tag }}
      lambda-artifact: ${{ steps.extract-lambda.outputs.filename }}
    needs: [setup, lint_dockerfiles, static_analysis, test_coverage_verification]
    if: |
      needs.setup.outputs.publishable == 'true' &&
      !failure() &&
      !cancelled() &&
      (!(contains(inputs.checks, 'unit_tests') && contains(inputs.checks, 'e2e_tests')) || success('test_coverage_verification')) &&
      (!contains(inputs.checks, 'static_analysis') || success('static_analysis')) &&
      (!contains(inputs.checks, 'lint_dockerfiles') || success('lint_dockerfiles'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2
        if: needs.setup.outputs.micronaut-gradle-installed == 'true'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Prepare image context
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          ./gradlew -p ${{ inputs.gradle-subproject }} ${{ inputs.native-build && 'buildNativeLayersTask dockerfileNative' || 'buildLayers dockerfile' }} dockerPrepareContext \
            -Papplication.version=${{ needs.setup.outputs.version }} \
            -Pgpr.user=${{ secrets.GPR_USER }} \
            -Pgpr.key=${{ secrets.GPR_KEY }}

      - name: Build and push
        id: build-and-push
        uses: equisoft-actions/docker-build-and-push@v2
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          build-args: |
            APPLICATION_VERSION=${{ needs.setup.outputs.version }}
            GPR_USER=${{ secrets.GPR_USER }}
            GPR_KEY=${{ secrets.GPR_KEY }}
          context: ${{ needs.setup.outputs.docker-context }}
          dockerfile: ${{ needs.setup.outputs.dockerfile }}
          name: ${{ needs.setup.outputs.image-name }}
          platforms: ${{ (inputs.lambda-build || needs.setup.outputs.is-release == 'true') && 'linux/amd64' || inputs.platforms }}
          push: ${{ inputs.publish-image && !inputs.lambda-build }}
          is-release: ${{ needs.setup.outputs.is-release }}
          max-memory: 8Gi
          use-emulation: ${{ needs.setup.outputs.use-emulation }}
          version: ${{ needs.setup.outputs.version }}
          working-directory: ${{ inputs.working-directory }}

      - name: Output pushed image tag
        id: output-pushed-image
        if: inputs.publish-image && !inputs.lambda-build
        shell: bash
        run: |
          echo "image-tag=${{ needs.setup.outputs.image-name }}:${{ steps.build-and-push.outputs.image-version }}" >> $GITHUB_OUTPUT

      - name: Extract lambda from image
        id: extract-lambda
        if: inputs.lambda-build
        shell: bash
        run: |
          filename=app-${{ needs.setup.outputs.version }}-lambda.zip
          container_id=fn

          docker create --name "$container_id" "${{ steps.build-and-push.outputs.image-id }}"
          docker cp "$container_id:/function/function.zip" "$filename"
          docker rm -v "$container_id"

          echo "filename=$filename" >> $GITHUB_OUTPUT

      - name: Upload lambda artifact
        uses: actions/upload-artifact@v4
        if: inputs.lambda-build
        with:
          name: ${{ steps.extract-lambda.outputs.filename }}
          path: ${{ steps.extract-lambda.outputs.filename }}
          retention-days: 1

  docker-security:
    uses: equisoft-actions/docker-workflows/.github/workflows/security.yml@v2
    if: |
      inputs.publish-image &&
      success('image') &&
      !failure() &&
      !cancelled()
    needs:
      - image
    with:
      image-tag: ${{ needs.image.outputs.image-tag }}
      working-directory: ${{ inputs.working-directory }}
    secrets:
      REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
      ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
      ECR_AWS_REGION: ${{ secrets.ECR_AWS_REGION }}

  generate_sdk:
    strategy:
      matrix:
        generator: ${{ fromJSON(needs.setup.outputs.sdk-generators-matrix) }}
    name: Generate ${{ matrix.generator }} SDK
    runs-on: ubuntu-latest
    needs:
      - setup
      - static_analysis
      - test_coverage_verification
    if: |
      !failure() &&
      !cancelled() &&
      inputs.enable-openapi-sdk != '' &&
      (! (contains(inputs.checks, 'unit_tests') && contains(inputs.checks, 'e2e_tests')) || success('test_coverage_verification')) &&
      (!contains(inputs.checks, 'static_analysis') || success('static_analysis'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Setup PHP  # TODO: Change the project setup to do that. Maybe put it into actions/with-asdf-vm?
        uses: shivammathur/setup-php@v2
        if: matrix.generator == 'php'
        with:
          php-version: "7.4"

      - name: Generate SDK
        uses: equisoft-actions/generate-openapi-sdk@v2
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          generator-name: ${{ matrix.generator }}
          is-release: ${{ needs.setup.outputs.is-release }}
          publish: ${{ inputs.publish-openapi-sdk && needs.setup.outputs.publishable == 'true'  && (needs.setup.outputs.is-hotfix != 'true' || inputs.publish-openapi-sdk-for-hotfix ) }}
          publish-pat: ${{ secrets.GPR_KEY }}
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
            gpr.write.key=${{ secrets.GPR_KEY }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - setup
      - compile
      - static_analysis
      - unit_tests
      - e2e_tests
      - test_coverage_verification
      - lint_dockerfiles
      - image
      - generate_sdk
    if: failure() && needs.setup.outputs.publishable == 'true'

    steps:
      - name: Post workflow status
        uses: equisoft-actions/notify-workflow-status@v1
        with:
          needs: ${{ toJSON(needs) }}
          slack-webhook-url: ${{ secrets.SLACK_NOTIFICATION_WEBHOOK_URL }}
