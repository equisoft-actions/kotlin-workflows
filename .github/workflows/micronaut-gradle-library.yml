name: Micronaut Gradle library

on:
  workflow_call:
    inputs:
      name:
        description: "Application name. Used as base to generate jar name, image name, sdk name, etc..."
        required: true
        type: string
      checks:
        description: |
          List of enabled check separated by comma.
          default: static_analysis,unit_tests,lint_dockerfiles
          available checks: static_analysis,unit_tests,e2e_tests
        required: false
        default: "static_analysis,unit_tests"
        type: string
      workflow-path:
        description: "Workflow file path allowing changes detection"
        default: ".github/workflows/micronaut-gradle.yml"
        required: false
        type: string
      working-directory:
        description: "Workflow working directory"
        default: '.'
        required: false
        type: string
      enable-test-coverage-comment:
        description: Post coverage results as a comment on the Pull Request. Defaults to `true`.
        required: false
        default: true
        type: boolean
      skip-duplicate-do-not-skip:
        default: '["push", "schedule", "workflow_dispatch"]'
        description: 'A JSON-Array of events that requires all checks to be run'
        required: false
        type: string
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      SLACK_NOTIFICATION_WEBHOOK_URL:
        description: A Slack webhook where workflow failures will be published to.
        required: true
    outputs:
      version:
        description: The computed version tag generated by this workflow
        value: ${{ jobs.setup.outputs.version }}

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content
          do_not_skip: ${{ inputs.skip-duplicate-do-not-skip }}
          paths: >-
            [
              "${{ inputs.workflow-path }}",
              ".tool-versions",
              "${{ inputs.working-directory }}/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs: [pre_checks]
    if: needs.pre_checks.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.metadata.outputs.is-release }}
      micronaut-gradle-installed: ${{ steps.build-metadata.outputs.micronaut-gradle-installed }}
      publishable: ${{ steps.metadata.outputs.publishable }}
      is-hotfix: ${{ steps.metadata.outputs.is-hotfix }}
      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrappers
        uses: gradle/wrapper-validation-action@v1

      - name: Application metadata
        id: metadata
        uses: equisoft-actions/application-metadata@v1
        with:
          hotfix-branch-prefix: release/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v1

      - name: Build metadata
        id: build-metadata
        shell: bash
        run: |
          BASE_NAME=${{ inputs.name }}
          FULL_NAME=$BASE_NAME
          SUBPROJECT_DIR=${{ inputs.working-directory }}
          VERSION=${{ steps.metadata.outputs.version }}

          MICRONAUT_GRADLE_INSTALLED=$(grep -s -q 'id("io.micronaut.application")\|id("com.equisoft.standards.micronaut")\|id = "com.equisoft.standards.micronaut"' "$SUBPROJECT_DIR/build.gradle.kts" "${{ inputs.working-directory }}/gradle/libs.versions.toml" 2>&1; echo $?)

          echo "micronaut-gradle-installed=$( [ "$MICRONAUT_GRADLE_INSTALLED" = 0 ] && echo true || echo false )" >> $GITHUB_OUTPUT

  build:
    name: Compile
    runs-on: ubuntu-latest
    needs:
     - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v1

      - name: Compile source and test code
        uses: burrunan/gradle-cache-action@v1
        with:
          gradle-version: wrapper
          build-root-directory: ${{ inputs.working-directory }}
          gradle-dependencies-cache-key: |
            buildSrc/**/Dependencies.kt
            gradle/libs.versions.toml
          arguments: ci-classes
          concurrent: true
          gradle-distribution-sha-256-sum-warning: false
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Run static check analysis
        uses: burrunan/gradle-cache-action@v1
        if: contains(inputs.checks, 'static_analysis')
        with:
          gradle-version: wrapper
          build-root-directory: ${{ inputs.working-directory }}
          gradle-dependencies-cache-key: |
            buildSrc/**/Dependencies.kt
            gradle/libs.versions.toml
          arguments: ci-check
          concurrent: true
          gradle-distribution-sha-256-sum-warning: false
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
          execution-only-caches: true

      - name: Upload results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: static-check-reports
          path: |
            ${{ inputs.working-directory }}/**/build/reports/detekt
            ${{ inputs.working-directory }}/**/build/reports/ktlint
          retention-days: 5

      - name: Run unit tests
        uses: equisoft-actions/gradle-junit@9a044033a0a3c2532d95e69071747b10b438c785
        if: contains(inputs.checks, 'unit_tests')
        with:
          working-directory: ${{ inputs.working-directory }}
          task-name: unit-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
          execution-only-caches: true

      - name: Run e2e tests
        uses: equisoft-actions/gradle-junit@9a044033a0a3c2532d95e69071747b10b438c785
        if: contains(inputs.checks, 'e2e_tests')
        with:
          working-directory: ${{ inputs.working-directory }}
          task-name: e2e-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
          execution-only-caches: true

      - name: Validate test coverage
        uses: equisoft-actions/gradle-jacoco-check@694ad905b31b291c6c94b5e4140f64046d101ca1
        if: (contains(inputs.checks, 'unit_tests') || contains(inputs.checks, 'e2e_tests'))
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
          enable-coverage-comment: ${{ inputs.enable-test-coverage-comment }}
          download-artifact: false
          execution-only-caches: true

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.publishable == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrappers
        uses: gradle/wrapper-validation-action@v1

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v1

      - name: Publish
        uses: burrunan/gradle-cache-action@v1
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-version: wrapper
          arguments: publish
          gradle-distribution-sha-256-sum-warning: false
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}
            gpr.write.user=${{ secrets.GPR_USER }}
            gpr.write.key=${{ secrets.GPR_KEY }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
      - publish

    if: failure() && needs.setup.outputs.publishable == 'true'

    steps:
      - name: Post workflow status
        uses: equisoft-actions/notify-workflow-status@v1
        with:
          needs: ${{ toJSON(needs) }}
          slack-webhook-url: ${{ secrets.SLACK_NOTIFICATION_WEBHOOK_URL }}
